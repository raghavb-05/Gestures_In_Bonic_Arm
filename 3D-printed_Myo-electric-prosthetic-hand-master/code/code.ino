#include <SPI.h>
#include <Wire.h>
// #include <Adafruit_GFX.h>
//#include <Adafruit_SSD1306.h>
#include<Servo.h>
//#include<PCF8574.h>


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
//Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Set i2c address
//PCF8574 pcf(0x20);

Servo s1, s2, s3, s4, s5, s6, s7, s8;
int fsrPin[] = {2, 3, 4, 5, 6, 7, 8, 9};
int sum = 0, avg = 0, fsr = 0, volts;

static const unsigned char PROGMEM logo_bmp[] =
{
  // 'TITLE', 128x32px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0xf7, 0xfb, 0xff, 0x03, 0x80, 0x38, 0x3f, 0xe1, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0xf7, 0xfb, 0xff, 0x03, 0x80, 0x3c, 0x3f, 0xe3, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0xf7, 0xfb, 0xff, 0x03, 0x80, 0x3c, 0x3f, 0xf3, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x00, 0x70, 0x03, 0x80, 0x7c, 0x38, 0xf3, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x00, 0x70, 0x03, 0x80, 0x7c, 0x38, 0xf3, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x00, 0x70, 0x03, 0x80, 0x7c, 0x38, 0xf3, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x00, 0x70, 0x03, 0x80, 0x6e, 0x38, 0xe3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x00, 0x70, 0x03, 0x80, 0x6e, 0x38, 0xe1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0xf0, 0x70, 0x03, 0x80, 0xee, 0x3f, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0xf0, 0x70, 0x03, 0x80, 0xee, 0x3f, 0xc0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0xf0, 0x70, 0x03, 0x80, 0xee, 0x3f, 0xe0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x00, 0x70, 0x03, 0x80, 0xe7, 0x38, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x00, 0x70, 0x03, 0x80, 0xc7, 0x38, 0x70, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x00, 0x70, 0x03, 0x81, 0xff, 0x38, 0x73, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x00, 0x70, 0x03, 0x81, 0xff, 0x38, 0x73, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x00, 0x70, 0x03, 0x81, 0xff, 0x38, 0x73, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0xf8, 0x70, 0x03, 0xfd, 0xc7, 0x3f, 0xf3, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0xf8, 0x70, 0x03, 0xfd, 0xc3, 0xbf, 0xf3, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x07, 0xf8, 0x70, 0x03, 0xff, 0x83, 0xbf, 0xe1, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PROGMEM Full_bmp[] =
{
  0xff, 0xfe, 0x80, 0x02, 0xbf, 0xfb, 0xbf, 0xfb, 0xbf, 0xfb, 0xbf, 0xfb, 0x80, 0x02, 0xff, 0xfe
};

static const unsigned char PROGMEM Empty_bmp[] =
{
  // 'Empty', 16x8px
  0xff, 0xfe, 0x80, 0x02, 0xa0, 0x03, 0xa0, 0x03, 0xa0, 0x03, 0xa0, 0x03, 0x80, 0x02, 0xff, 0xfe
};

static const unsigned char PROGMEM SF_bmp[] =
{
  // '75', 16x8px
  0xff, 0xfe, 0x80, 0x02, 0xbf, 0xc3, 0xbf, 0xc3, 0xbf, 0xc3, 0xbf, 0xc3, 0x80, 0x02, 0xff, 0xfe
};

static const unsigned char PROGMEM TF_bmp[] =
{
  // '25', 16x8px
  0xff, 0xfe, 0x80, 0x02, 0xbc, 0x03, 0xbc, 0x03, 0xbc, 0x03, 0xbc, 0x03, 0x80, 0x02, 0xff, 0xfe
};





void setup() {
  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  //configuring fsr digital pins to OUTPUT
  for (int j = 0; j < 8; j++)
  {
    pinMode(fsrPin[j], OUTPUT);
  }

  // defining pins to servo
  s1.attach(P0); //pinky finger
  s2.attach(P1); //ring finger
  s3.attach(P3); //middle finger
  s4.attach(P4); //index finger
  s5.attach(P5); //thumb finger
  s6.attach(P6); //thumb servo
  s7.attach(P7); //wrist
  s8.attach(10); //unsigned

  //reseting the position to 0 degress
  s1.write(0);
  s2.write(0);
  s3.write(0);
  s4.write(0);
  s5.write(0);
  s6.write(0);
  s7.write(0);
  s8.write(0);

  pcf.begin();


  // Clear the buffer of oled display
  display.clearDisplay();
  delay(200);
  Logo();    //displays logo on OLED
  delay(1000);

}

void loop() {


  int voltReading = analogRead(A1); //BATTERY +VE CONNECTED TO A1
  Serial.println(voltReading);
  volts = voltReading * 100L / 1023;
  Serial.println(volts);

  // FSR code
  for (int i = 2; i <= 9 ; i++) {
    digitalWrite(i, HIGH);
    fsr = analogRead(A0); //fsr analog pin connected to A0
    sum = fsr + sum;
    digitalWrite(i, LOW);
    delay(100);
  }
  avg = sum / 8;

  //FSR code ENDS


  delay(100);

  // BATTERY code

  if (volts <= 20) {
    display.clearDisplay();
    display.display();
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.print(volts);
    display.print("%");
    display.display();
    display.drawBitmap(100, 0, Empty_bmp, 16, 8, 1);
    display.display();
  }

  else if (volts <= 25) {
    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.print(volts);
    display.print("%");
    display.drawBitmap(100, 0, TF_bmp, 16, 8, 1);
    display.display();


  }

  else if (volts < 75) {
    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.print(volts);
    display.print("%");
    display.drawBitmap(100, 0, SF_bmp, 16, 8, 1);
    display.display();


  }

  else {

    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.print(volts);
    display.print("%");
    display.drawBitmap(100, 0, Full_bmp, 16, 8, 1);
    display.display();

  }

  // BATTERY code ENDS

  delay(100);

}

void Logo(void) {
//  display.clearDisplay();
  display.drawBitmap(10, 10, logo_bmp, 128, 32, 1);
  display.display();
  delay(1000);
}


//defining different types of grippers
int relax_grip() {

  s1.write(0);
  s2.write(0);
  s3.write(0);
  s4.write(0);
  s5.write(0);
  s6.write(0);
  delay(100);
}

int power_grip() {

  s1.write(180);
  s2.write(180);
  s3.write(180);
  s4.write(180);
  s5.write(180);
  s6.write(180);
  delay(100);
}

int tripod_grip() {

  s1.write(180);
  s2.write(180);
  s3.write(90);
  s4.write(90);
  s5.write(90);
  s6.write(180);
  delay(100);

}


int finger_point() {

  s1.write(180);
  s2.write(180);
  s3.write(150);
  s4.write(0);
  s5.write(0);
  s6.write(0);
  delay(100);

}

int key_grip() {

  s1.write(180);
  s2.write(180);
  s3.write(180);
  s4.write(180);
  s5.write(90);
  s6.write(0);
  delay(100);
}

int active_index() {

  s1.write(180);
  s2.write(180);
  s3.write(150);
  s4.write(0);
  s5.write(180);
  s6.write(180);
  delay(100);

}

int column_grip() {
  s5.write(18);
  s6.write(180);
  s1.write(180);
  s2.write(180);
  s3.write(180);
  s4.write(180);
  delay(100);
}

int mouse_grip() {
  s1.write(90);
  s2.write(90);
  s3.write(90);
  s4.write(90);
  s5.write(90);
  s6.write(180);
  delay(100);
}


int pinch_grip() {

  s1.write(180);
  s2.write(180);
  s3.write(180);
  s4.write(90);
  s5.write(90);
  s6.write(180);
  delay(100);
}


int precision_open() {

  s1.write(0);
  s2.write(0);
  s3.write(0);
  s4.write(90);
  s5.write(90);
  s6.write(90);
  delay(100);
}
